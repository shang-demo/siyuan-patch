name: release android and electron

on:
  workflow_dispatch:
  push:
    branches:
      - dev

jobs:
  create_release:
    name: get version and create release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.release_version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: version check
        id: version
        env:
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
        run: |
          # 获取已经 release 的版本
          releasedVersion=$(wget -qO- -t3 -T30 "https://api.github.com/repos/${{ secrets.DOCKER_HUB_USER }}/siyuan-patch/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g')
          # 获取最新代码的版本
          packageVersion=$(wget -qO- -t3 -T30 "https://raw.githubusercontent.com/siyuan-note/siyuan/master/app/package.json" | grep "version" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g')
          # 设置输出
          if [ "${releasedVersion}" = "${packageVersion}" ]; then
            echo "same"
            echo "::set-output name=release_version::0"
          else
            echo "not-same"
            echo "::set-output name=release_version::${packageVersion}"
            # echo "${packageVersion}"
          fi
          echo "DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}"
          echo "releasedVersion: ${releasedVersion}"
          echo "packageVersion: ${packageVersion}"

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        if: ${{ steps.version.outputs.release_version != '0' }}
        with:
          name: ${{ steps.version.outputs.release_version }}
          tag: ${{ steps.version.outputs.release_version }}
          body: ""
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: create_release
    if: ${{ needs.create_release.outputs.version != '0' }}
    strategy:
      matrix:
        config:
          - os: ubuntu-20.04
            kernel_path: "../../../siyuan-android/app/libs/kernel.aar"
            target: "android"

    steps:
      - uses: actions/checkout@v3
        with:
          path: ${{ github.workspace }}/siyuan-note/

      - name: clone origin and apply patches
        run: |
          cd ${{ github.workspace }}/siyuan-note/

          git clone --depth=1 https://github.com/siyuan-note/siyuan.git
          cd siyuan

          git apply ${{ github.workspace }}/siyuan-note/patches/siyuan/disable-update.patch
          git apply ${{ github.workspace }}/siyuan-note/patches/siyuan/mock-vip-user.patch

          git status

          cd ..

          git clone --depth=1 https://github.com/siyuan-note/siyuan-android.git
          cd siyuan-android

          git apply ${{ github.workspace }}/siyuan-note/patches/siyuan-android/debug-build.patch

          mkdir -p app/src/main/assets/
          mkdir -p app/libs/

          mkdir -p ${{ github.workspace }}/go

      - name: Set up MingGW
        uses: msys2/setup-msys2@v2
        if: contains( matrix.config.goos, 'windows')
        with:
          install: p7zip mingw-w64-x86_64-lua

      - name: Set up TDM-GCC
        run: msys2 -c "bash siyuan-note/siyuan/scripts/get-tdm-gcc.sh tdm https://github.com/jmeubank/tdm-gcc/releases/download/v10.3.0-tdm-1/tdm-gcc-10.3.0.exe" && echo "CC=${{ github.workspace }}/tdm/bin/gcc.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        if: contains( matrix.config.goarch, '386')
        working-directory: ${{ github.workspace }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Set up goversioninfo
        run: go get github.com/josephspurrier/goversioninfo/cmd/goversioninfo && go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo
        if: contains( matrix.config.goos, 'windows')
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/kernel
        env:
          GO111MODULE: on
          CGO_ENABLED: 1
          GOOS: ${{ matrix.config.goos }}
          GOPATH: ${{ github.workspace }}/go
          GOARCH: ${{ matrix.config.goarch }}

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Node pnpm
        run: npm install -g pnpm
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app

      - name: Install Node Dependencies
        run: pnpm install --no-frozen-lockfile
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app

      - name: Building UI
        run: pnpm run build
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app

      - name: Remove Build Directory
        uses: JesseTG/rm@v1.0.2
        with:
          path: ${{ github.workspace }}/siyuan-note/siyuan/app/build

      - name: Remove Kernel Directory for Linux
        uses: JesseTG/rm@v1.0.2
        with:
          path: ${{ github.workspace }}/siyuan-note/siyuan/app/kernel-linux

      - name: Remove Kernel Directory for Windows
        uses: JesseTG/rm@v1.0.2
        with:
          path: ${{ github.workspace }}/siyuan-note/siyuan/app/kernel

      - name: Remove Kernel Directory for macOS
        uses: JesseTG/rm@v1.0.2
        with:
          path: ${{ github.workspace }}/siyuan-note/siyuan/app/kernel-darwin

      - name: Remove Kernel Directory for macOS ARM64
        uses: JesseTG/rm@v1.0.2
        with:
          path: ${{ github.workspace }}/siyuan-note/siyuan/app/kernel-darwin-arm64

      - name: Generate Icon Resource and Properties/Version Info For Windows
        run: ${{ github.workspace }}\go\${{ matrix.config.gobin }}\goversioninfo -platform-specific=true -icon="resource\icon.ico" -manifest="resource\goversioninfo.exe.manifest"
        if: contains( matrix.config.goos, 'windows')
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/kernel

      - name: Building Kernel
        if: matrix.config.target != 'android'
        run: go build --tags fts5 -o "${{ matrix.config.kernel_path }}" -v -ldflags "${{ matrix.config.build_args }}"
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/kernel
        env:
          GO111MODULE: on
          CGO_ENABLED: 1
          GOOS: ${{ matrix.config.goos }}
          GOPATH: ${{ github.workspace }}/go
          GOARCH: ${{ matrix.config.goarch }}

      - name: Building Electron
        if: matrix.config.target != 'android'
        run: pnpm run ${{ matrix.config.electron_args }}
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app

      - name: Upload Electron App
        if: matrix.config.target != 'android'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: siyuan-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}
          asset_path: ${{ github.workspace }}/siyuan-note/siyuan/app/build/siyuan-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}
          asset_content_type: application/octet-stream

      - name: gomobile
        working-directory: ${{ github.workspace }}/go
        if: contains( matrix.config.target, 'android')
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init

      - name: Set up java
        uses: actions/setup-java@v3
        if: contains( matrix.config.target, 'android')
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "gradle"

      - name: Building Android Kernel
        if: contains( matrix.config.target, 'android')
        run: |
          gomobile bind --tags fts5 -androidapi 21 -target='android/arm64'  -ldflags '-s -w' -v -o "${{ matrix.config.kernel_path }}" ./
          ls -la "${{ matrix.config.kernel_path }}"
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/kernel/mobile
        env:
          GO111MODULE: on
          CGO_ENABLED: 1

      - name: android assets
        if: contains( matrix.config.target, 'android')
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app/
        run: |
          zip -r ${{ github.workspace }}/siyuan-note/siyuan-android/app/src/main/assets/app.zip ./appearance ./guide ./stage ./changelogs

      - name: Decode Keystore
        if: contains( matrix.config.target, 'android')
        id: decode_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: "debug.jks"
          fileDir: ${{ github.workspace }}/siyuan-note/siyuan-android/keystore
          encodedString: ${{ secrets.KEYSTORE }}

      - name: Building Android
        if: contains( matrix.config.target, 'android')
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan-android
        run: |
          chmod 777 ./gradlew
          ./gradlew :app:assembleDebug
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      - name: Upload Android
        if: contains( matrix.config.target, 'android')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: siyuan-${{ needs.create_release.outputs.version }}-android-arm64
          asset_path: ${{ github.workspace }}/siyuan-note/siyuan-android/app/build/outputs/apk/debug/app-debug.apk
          asset_content_type: application/octet-stream
